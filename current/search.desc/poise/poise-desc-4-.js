searchState.loadedDescShard("poise", 4, "Called before every command\nReturns the prefix this command was invoked with, or a …\nReturns the prefix this command was invoked with, or a …\nReturns the prefix this command was invoked with, or a …\nPrefix used by the user to invoke this command\nThe main bot prefix. Can be set to None if the bot …\nCallback to execute when this command is invoked in a …\nPrefix command specific options.\nFull name including parent command names.\nLike <code>Self::say</code>, but formats the message as a reply to the …\nLike <code>Self::say</code>, but formats the message as a reply to the …\nLike <code>Self::say</code>, but formats the message as a reply to the …\nBuilds a <code>crate::CreateReply</code> by combining the builder …\nBuilds a <code>crate::CreateReply</code> by combining the builder …\nBuilds a <code>crate::CreateReply</code> by combining the builder …\nInvoked before every message sent using <code>crate::Context::say</code>…\nIf <code>true</code>, changes behavior of guild_only command check to …\n<code>true</code> is this parameter is required, <code>false</code> if it’s …\nPermissions without which command execution will fail. You …\nPermissions which users must have to invoke this command. …\nRe-runs this entire command invocation\nRe-runs this entire command invocation\nRe-runs this entire command invocation\nAfter the first response, whether to post subsequent …\nShorthand of <code>crate::say_reply</code>\nShorthand of <code>crate::say_reply</code>\nShorthand of <code>crate::say_reply</code>\nShorthand of <code>crate::send_reply</code>\nShorthand of <code>crate::send_reply</code>\nShorthand of <code>crate::send_reply</code>\nReturn the stored <code>serenity::Context</code> within the underlying …\nReturn the stored <code>serenity::Context</code> within the underlying …\nReturn the stored <code>serenity::Context</code> within the underlying …\nReturns the <code>serenity::Context</code> of this error\nSerenity’s context, like HTTP or cache\nSerenity’s context, like HTTP or cache\nSerenity’s context, like HTTP or cache\nStores the given value as the data for this command …\nStores the given value as the data for this command …\nStores the given value as the data for this command …\nIf set to true, skips command checks if command was issued …\nCallback to execute when this command is invoked in a …\nThe name of the <code>#[poise::command]</code>-annotated function\nCallback invoked on every message to strip the prefix off …\nRequire a subcommand to be invoked\nSubcommands of this command, if any\nWhether to delete the bot response if an existing …\nHow this command invocation was triggered\nClosure that sets this parameter’s type and min/max …\nThe serenity Context passed to the event\nThe serenity context passed to the event handler\nGeneral context\nGeneral context\nCommand context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nSerenity’s Context\nSerenity’s Context\nSerenity’s Context\nDiscord Ready event data present during setup\nDeveloper-readable description of the type mismatch\nError which was thrown in the setup code\nError which was thrown in the event handler code\nError which was thrown in the command code\nError which was thrown by the parameter type’s parsing …\nIf execution wasn’t aborted because of an error but …\nError which was thrown in the dynamic prefix code\nThe error thrown by user code\nWhich event was being processed when the error occurred\nThe Framework passed to the event\nThe Framework passed to the event\nFramework context\nFramework context\nFramework context\nIf applicable, the input on which parsing failed\nThe interaction in question\nSee <code>crate::Context::invocation_data</code>\nWhich permissions in particular the bot is lacking for …\nList of permissions that the user is lacking. May be None …\nMessage which the dynamic prefix callback was evaluated …\nThe message in question\nThe interaction in question\nThe rest of the message (after the prefix) which was not …\nPanic payload which was thrown in the command code\nThe prefix that was recognized\nTime until the command may be invoked for the next time in …\nWhich event triggered the message parsing routine\nStores messages and the associated bot responses in order …\nGiven a message by a user, find the corresponding bot …\nCreate an edit tracker which tracks messages for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRemoves this command invocation from the cache and returns …\nReturns a copy of a newly up-to-date cached message, or a …\nForget all of the messages that are older than the …\nNotify the <code>EditTracker</code> that the given user message should …\nStore that this command is currently running; so that if …")