searchState.loadedDescShard("typemap_rev", 0, "A hashmap whose keys are defined by types.\nStorage type that allows cloning and formatting a <code>TypeMap</code> …\nStorage type that allows cloning a <code>TypeMap</code> if the values …\nStorage type that allows formatting a <code>TypeMap</code> in debug …\nThe default type used for storing values in a <code>TypeMap</code>.\nA view into a single entry in the <code>TypeMap</code>, which may …\nTypeMap is a simple abstraction around the standard library…\nTypeMapKey is used to declare key types that are eligible …\nDefines the value type that corresponds to this <code>TypeMapKey</code>.\nClears all entries in the map.\nReturns <code>true</code> if the map contains a value for the specified …\nCreates a new instance of <code>TypeMap</code> with a custom storage …\nRetrieve the entry based on its <code>TypeMapKey</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve a reference to a value based on its <code>TypeMapKey</code>. …\nRetrieve a mutable reference to a value based on its …\nInserts a new value based on its <code>TypeMapKey</code>. If the value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an indicator whether the map is empty (no entries).\nReturns the amount of entries in the map.\nCreates a new instance of <code>TypeMap</code>.\nRemoves a value from the map based on its <code>TypeMapKey</code>.")